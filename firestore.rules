rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions (unchanged)
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // NOTE: This is your HARDCODED admin rule. We can change this later
      // to the database-driven one if you like, but for now, let's just fix the bug.
      let adminUIDs = ['vygqDhG0kRQx4wDrBaYV8H2q1n12'];
      return request.auth.uid in adminUIDs;
    }
    
    // ==========================================
    //              Performers
    // ==========================================
    match /performers/{performerId} {
      // Read rules are correct
      allow get, list: if true;
      
      // Create rule is correct
      allow create: if isSignedIn() && isOwner(performerId);
      
      // --- THIS IS THE FINAL, DEFINITIVE FIX ---
      // UPDATE: Allow an update if the user is the owner OR if they are an admin.
      // This allows your secure API route to update the document.
      allow update: if isSignedIn() && (isOwner(performerId) || isAdmin());
      
      // Delete rule is correct
      allow delete: if false;

      // SUBCOLLECTION: Reviews for a performer
      match /reviews/{reviewId} {
        allow read: if true;
        allow write: if false; 
      }
    }
    
    // ==========================================
    //              Customers
    // ==========================================
    match /customers/{userId} {
      // These rules are correct.
      allow get, create, update: if isSignedIn() && isOwner(userId);
      allow list: if true;
      allow delete: if false;

      // SUBCOLLECTION: Reviews for a customer
      match /reviews/{reviewId} {
        allow read: if true;
        allow write: if false;
      }
    }
    
    // ==========================================
    //              Bookings
    // ==========================================
    match /bookings/{bookingId} {
      // These rules are correct.
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(resource.data.performerId));
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(resource.data.performerId));
      allow delete: if false;
    }

    // ==========================================
    //              Feedback
    // ==========================================
    match /feedback/{feedbackId} {
      // These rules are correct.
      allow read: if isSignedIn() && isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
    
    // ==========================================
    //              Suggestions
    // ==========================================
    match /suggestions/{suggestionId} {
        // These rules are correct.
        allow read: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if false;
    }
  }
}